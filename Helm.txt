Helm Setup & Configuration
We have different approches
 >binary
  >Download Helm binary from release >>https://github.com/helm/helm/release
  >unpack helm client Package
  >Place the binary in default executable PATH /usr/local/bin

 >Package Manager  
 >Script

Helm Chart file structure (directory structure)
...............................................

Chart is way to bundel YAML and tempalets files as a package to deploy application (Objects)
on kubernetescluster

A application package (helm chart) has below files:
 >Chart.yaml
 >values.yaml
 >values.schema.json
 >.helmignore(file)
 >README.md(file)
 >LICENSE(file)
 >templets(folder)
 >charts(folder)
 >crds(folder)
 >NOTES.txt(file)
 >_helpers.tpl(file)
 >tests(folder)

After development of helm charts, these above files will be packaged as tar.gz(archive) file
and pushed to Chart repository

These charts will be deployed on kubernetes cluster manually or through CICD or GitOps 

>>Chart.yaml
 >Chart.yaml stores information of the chart

Exampel Chart,yaml file
.......................

apiVersion: The chart API version (required)
name: The name of the chart (required)
version: A SemVer 2 version (required)
kubeVersion: A SemVer range of compatible Kubernetes versions (optional)
description: A single-sentence description of this project (optional)
type: The type of the chart (optional)
keywords:
  - A list of keywords about this project (optional)
home: The URL of this projects home page (optional)
sources:
  - A list of URLs to source code for this project (optional)
dependencies: # A list of the chart requirements (optional)
  - name: The name of the chart (nginx)
    version: The version of the chart ("1.2.3")
    repository: (optional) The repository URL ("https://example.com/charts") or alias ("@repo-name")
    condition: (optional) A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )
    tags: # (optional)
      - Tags can be used to group charts for enabling/disabling together
    import-values: # (optional)
      - ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.
    alias: (optional) Alias to be used for the chart. Useful when you have to add the same chart multiple times
maintainers: # (optional)
  - name: The maintainers name (required for each maintainer)
    email: The maintainers email (optional for each maintainer)
    url: A URL for the maintainer (optional for each maintainer)
icon: A URL to an SVG or PNG image to be used as an icon (optional).
appVersion: The version of the app that this contains (optional). Needn't be SemVer. Quotes recommended.
deprecated: Whether this chart is deprecated (optional, boolean)
annotations:
  example: A list of annotations keyed by name (optional).

>Parameters that we can define in file:
  >>apiVersion (required) ------>>>>> v1 is for v2(old) & v2 is for V3 (currently used)
  >>name (required) ------>>>>>  name for chart 
  >>version (required) ------>>>>>   Version for chart Syntax <<major.minor.patch>> Ex: 1.20.3
    >>>>>> major ------>>>>> update when major changes took place
    >>>>>> minor ------>>>>> update when minor changes took place
    >>>>>> patch ------>>>>> update after bug fixing
  >>appVersion  (optional) ------>>>>> We can give the application version we are going to use 
    Ex: we are going to deploy Nging 1.23.2 then we will give 1.23.2 here   
  >>kubeVersion (optional) ------>>>>> We can give for which version of kubernetes the application works
  >>description (optional) ------>>>>> We can describe here what the chart is for 
  >>type (optional) ------>>>>> We can define the type of application 
   Ex: Web Application for Nginx or DB Application for MySql
  >>keywords (optional) ------>>>>> Additional information if required
  >>home (optional) 
  >>sources (optional)
  >>dependencies (optional)
  >>maintainers (optional)
  >>Icon (optional)
  >>deperecated (optional)
  >>annotations (optional)
  