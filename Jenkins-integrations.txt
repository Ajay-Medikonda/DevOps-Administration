Note: By default when we install jenkins on server, user 'jenkins' will be created.
Log on to Jenkins >> su - jenkins 

1.Git Hub Integration with jenkins
 >>ssh-keygen
 >>add private key in jenkins credientials
 >>add public key in github ssh keys

2.Git Host Key Verification Configuration
>>Manage Jenkins
 >>Configure Global Security >> Git Host Key Verification Configuration >>Host Key Verification Strategy >>No Verification >>Save 

3.Sonarqube Integration with jenkins
>>Goto SonarQube : http://sonar.medikonda.xyz:9000 in browser & login 
 >>Administration >Security >users >Administratoradmin >Tokens > Click (update Tokens) on 4 line symbol unde Tokens
 >>Generate Tokens >Name <Any of your choice> : Jenkins-Tokens > Generate
 >>Now goto Manage Jenkins >>> Credentials >> system >> Global Credentials (unrestricted)>>Add Credentials
 >>Kind: Secret text
 >>Secret:<<Generated in SonarQube>>: squ_5a082e8e60fce149e16c51d7185ec762a0553f1d
 >>ID:<<Should be same as in jenkins file "projectKey"="spring-boot-app-dev"
 >>Description: Give any name: spring-boot-app-dev
 >>create

>>For Dev Environment
>>Manage Jenkins
 >>System Configuration >>Configure System >>SonarQube servers >>Add SonarQube
 >>Name <<Should be same as in SonarQube at Jenkins file>> : Ajay-SonarQube-DEV 
 >>Server URL <<url created for SonarQube>> : http://sonar.medikonda.xyz:9000
 >>Server authentication token : select Secret text created

>>For Prod Environment
>>Manage Jenkins
 >>System Configuration >>Configure System >>SonarQube servers >>Add SonarQube
 >>Name <<Should be same as in SonarQube at Jenkins file>> : Ajay-SonarQube-PROD 
 >>Server URL <<url created for SonarQube>> : http://sonar.medikonda.xyz:9000
 >>Server authentication token : select Secret text created
 
